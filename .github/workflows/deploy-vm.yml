# Nome do workflow
name: Build and Deploy Docker Image

# Gatilho manual: o workflow só será executado quando disparado manualmente via interface do GitHub
on: workflow_dispatch  # Executa apenas manualmente, não em push

jobs:
  # Primeiro job: build e push da imagem Docker
  build-and-push:
    runs-on: ubuntu-latest  # Runner que executará o job

    # Define uma saída chamada TAG que será usada no próximo job (deploy)
    outputs:
      TAG: ${{ steps.docker_tag.outputs.TAG }}

    steps:
      # Clona o repositório no runner
      - name: Checkout code
        uses: actions/checkout@v3

      # Faz login no Docker Hub com as credenciais armazenadas em secrets
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Extrai uma tag para a imagem:
      # Se estiver em uma tag do Git (release), usa ela.
      # Caso contrário, usa os primeiros 7 caracteres do SHA do commit.
      - name: Extract Docker tag
        id: docker_tag
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            TAG="${GITHUB_REF#refs/tags/}"
          else
            TAG="${GITHUB_SHA::7}"
          fi
          echo "TAG=$TAG" >> $GITHUB_OUTPUT

      # Constrói a imagem Docker com a tag gerada acima
      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/fastapi-crud:${{ steps.docker_tag.outputs.TAG }} .

      # Realiza o push da imagem para o Docker Hub
      - name: Push Docker image
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/fastapi-crud:${{ steps.docker_tag.outputs.TAG }}

  # Segundo job: faz o deploy da imagem na VM
  deploy-to-vm:
    needs: build-and-push  # Aguarda o job anterior ser concluído com sucesso
    runs-on: ubuntu-latest

    steps:
      # Configura o agente SSH para autenticação com a VM remota
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      # Conecta à VM via SSH e realiza o deploy do container com a nova imagem
      - name: Deploy container on remote VM
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} << EOF
            # Baixa a imagem atualizada
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/fastapi-crud:${{ needs.build-and-push.outputs.TAG }}
            # Para e remove o container anterior, se existir
            docker stop fastapi-crud || true
            docker rm fastapi-crud || true
            # Executa o container com a nova imagem
            docker run -d --name fastapi-crud -p 8000:8000 ${{ secrets.DOCKERHUB_USERNAME }}/fastapi-crud:${{ needs.build-and-push.outputs.TAG }}
          EOF
